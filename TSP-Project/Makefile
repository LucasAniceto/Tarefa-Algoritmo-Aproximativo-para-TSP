# Makefile principal do projeto TSP
# Compila todos os componentes e executa testes

.PHONY: all clean test setup run-all help c-only java-only python-only quick-test

# Configura√ß√µes
CC = gcc
CFLAGS = -Wall -Wextra -O3 -std=c99
JAVA_SRC_DIR = src/java/exact
C_EXACT_DIR = src/c/exact
C_APPROX_DIR = src/c/approximate
BIN_DIR = bin
DATA_DIR = data
RESULTS_DIR = results

# Alvos principais
all: setup c-programs java-programs
	@echo "‚úÖ Compila√ß√£o completa conclu√≠da"
	@echo "Execute 'make test' para testar ou 'make run-all' para experimentos completos"

# Configura√ß√£o inicial
setup:
	@echo "üîß Configurando ambiente..."
	@mkdir -p $(BIN_DIR) $(RESULTS_DIR)
	@echo "‚úÖ Diret√≥rios criados"

# Compila√ß√£o de programas C
c-programs: c-exact c-approx

c-exact:
	@echo "üî® Compilando algoritmos exatos (C)..."
	@if [ -d "$(C_EXACT_DIR)" ]; then \
		cd $(C_EXACT_DIR) && $(MAKE) all; \
	else \
		echo "‚ö†Ô∏è  Diret√≥rio $(C_EXACT_DIR) n√£o encontrado"; \
	fi

c-approx:
	@echo "üî® Compilando algoritmos aproximativos (C)..."
	@if [ -d "$(C_APPROX_DIR)" ]; then \
		cd $(C_APPROX_DIR) && $(MAKE) all; \
	else \
		echo "‚ö†Ô∏è  Diret√≥rio $(C_APPROX_DIR) n√£o encontrado"; \
	fi

# Compila√ß√£o Java
java-programs:
	@echo "‚òï Compilando programas Java..."
	@if [ -d "$(JAVA_SRC_DIR)" ]; then \
		cd $(JAVA_SRC_DIR) && \
		rm -f *.class && \
		echo "Compilando na ordem de depend√™ncias..." && \
		javac TSPInstance.java && \
		javac TSPResult.java && \
		javac BruteForce.java && \
		javac BranchBound.java && \
		javac TSPSolver.java && \
		echo "‚úÖ Java compilado com sucesso"; \
	else \
		echo "‚ö†Ô∏è  Diret√≥rio $(JAVA_SRC_DIR) n√£o encontrado"; \
	fi

# Testes r√°pidos
quick-test: all
	@echo "üß™ Executando testes r√°pidos..."
	@echo "Testando com tsp2_1248.txt (6 cidades):"
	@if [ -f "$(BIN_DIR)/mst_approx" ] && [ -f "$(DATA_DIR)/tsp2_1248.txt" ]; then \
		echo "  MST Aproximativo (C):"; \
		$(BIN_DIR)/mst_approx $(DATA_DIR)/tsp2_1248.txt; \
	fi
	@if [ -f "$(BIN_DIR)/brute_force" ] && [ -f "$(DATA_DIR)/tsp2_1248.txt" ]; then \
		echo "  For√ßa Bruta (C):"; \
		timeout 30 $(BIN_DIR)/brute_force $(DATA_DIR)/tsp2_1248.txt || echo "  (timeout ou erro)"; \
	fi
	@if [ -f "src/python/approximate/mst_algorithm.py" ] && [ -f "$(DATA_DIR)/tsp2_1248.txt" ]; then \
		echo "  MST Aproximativo (Python):"; \
		python3 src/python/approximate/mst_algorithm.py $(DATA_DIR)/tsp2_1248.txt; \
	fi

# Teste completo
test: quick-test
	@echo "üß™ Executando bateria de testes..."
	@echo "Testando algoritmos C com arquivos pequenos..."
	@if [ -d "$(C_EXACT_DIR)" ]; then \
		cd $(C_EXACT_DIR) && $(MAKE) test-small; \
	fi
	@if [ -d "$(C_APPROX_DIR)" ]; then \
		cd $(C_APPROX_DIR) && $(MAKE) test-small; \
	fi

# Execu√ß√£o completa dos experimentos
run-all: all
	@echo "üöÄ Iniciando experimentos completos..."
	@python3 run_experiments.py

# Apenas experimentos C
c-only: c-programs
	@echo "üî¨ Executando apenas experimentos C..."
	@for file in $(DATA_DIR)/tsp*.txt; do \
		if [ -f "$$file" ]; then \
			echo "Processando $$file..."; \
			if [ -f "$(BIN_DIR)/mst_approx" ]; then \
				$(BIN_DIR)/mst_approx "$$file"; \
			fi; \
		fi; \
	done

# Apenas experimentos Java
java-only: java-programs
	@echo "‚òï Executando apenas experimentos Java..."
	@cd $(JAVA_SRC_DIR) && \
	for file in ../../../$(DATA_DIR)/tsp1_253.txt ../../../$(DATA_DIR)/tsp2_1248.txt; do \
		if [ -f "$$file" ]; then \
			echo "Testando $$file com Java..."; \
			timeout 300 java TSPSolver brute-force "$$file" || echo "Timeout ou erro"; \
		fi; \
	done

# Apenas experimentos Python
python-only:
	@echo "üêç Executando apenas experimentos Python..."
	@if [ -f "src/python/approximate/main.py" ]; then \
		python3 src/python/approximate/main.py --no-c --no-java; \
	else \
		echo "Script Python n√£o encontrado"; \
	fi

# Limpeza
clean:
	@echo "üßπ Limpando arquivos..."
	@rm -f $(BIN_DIR)/*
	@if [ -d "$(C_EXACT_DIR)" ]; then cd $(C_EXACT_DIR) && $(MAKE) clean; fi
	@if [ -d "$(C_APPROX_DIR)" ]; then cd $(C_APPROX_DIR) && $(MAKE) clean; fi
	@if [ -d "$(JAVA_SRC_DIR)" ]; then rm -f $(JAVA_SRC_DIR)/*.class; fi
	@rm -f $(RESULTS_DIR)/*.txt $(RESULTS_DIR)/*.json $(RESULTS_DIR)/*.png
	@echo "‚úÖ Limpeza conclu√≠da"

# Verifica√ß√£o do ambiente
check:
	@echo "üîç Verificando ambiente..."
	@echo "Compiladores:"
	@gcc --version | head -1 || echo "‚ùå GCC n√£o encontrado"
	@javac -version 2>&1 || echo "‚ùå Java compiler n√£o encontrado"
	@java -version 2>&1 | head -1 || echo "‚ùå Java runtime n√£o encontrado"
	@python3 --version || echo "‚ùå Python3 n√£o encontrado"
	@make --version | head -1 || echo "‚ùå Make n√£o encontrado"
	@echo ""
	@echo "Estrutura de diret√≥rios:"
	@ls -la src/ 2>/dev/null || echo "‚ùå src/ n√£o encontrado"
	@ls -la data/ 2>/dev/null || echo "‚ùå data/ n√£o encontrado"
	@echo ""
	@echo "Arquivos de dados:"
	@ls -la data/tsp*.txt 2>/dev/null || echo "‚ùå Arquivos TSP n√£o encontrados em data/"
	@echo ""
	@echo "Bibliotecas Python:"
	@python3 -c "import matplotlib; print('‚úÖ matplotlib')" 2>/dev/null || echo "‚ùå matplotlib n√£o encontrado"
	@python3 -c "import pandas; print('‚úÖ pandas')" 2>/dev/null || echo "‚ùå pandas n√£o encontrado"
	@python3 -c "import numpy; print('‚úÖ numpy')" 2>/dev/null || echo "‚ùå numpy n√£o encontrado"

# Instala√ß√£o de depend√™ncias (Ubuntu/Debian)
install-deps:
	@echo "üì¶ Instalando depend√™ncias..."
	sudo apt update
	sudo apt install -y gcc openjdk-11-jdk make python3 python3-pip
	pip3 install matplotlib pandas numpy
	@echo "‚úÖ Depend√™ncias instaladas"

# Benchmark r√°pido
benchmark: all
	@echo "‚è±Ô∏è  Executando benchmark..."
	@echo "Arquivo,Algoritmo,Tempo(s),Custo" > $(RESULTS_DIR)/benchmark.csv
	@for file in $(DATA_DIR)/tsp1_253.txt $(DATA_DIR)/tsp2_1248.txt; do \
		if [ -f "$$file" ]; then \
			echo "Benchmarking $$file..."; \
			if [ -f "$(BIN_DIR)/mst_approx" ]; then \
				timeout 60 $(BIN_DIR)/mst_approx "$$file"; \
			fi; \
		fi; \
	done
	@echo "Benchmark salvo em $(RESULTS_DIR)/benchmark.csv"

# Demonstra√ß√£o
demo: quick-test
	@echo "üé¨ Demonstra√ß√£o do projeto..."
	@echo ""
	@echo "1. Algoritmo aproximativo √© muito r√°pido:"
	@time $(BIN_DIR)/mst_approx $(DATA_DIR)/tsp1_253.txt 2>/dev/null || true
	@echo ""
	@echo "2. Algoritmo exato √© mais lento mas encontra solu√ß√£o √≥tima:"
	@timeout 10 $(BIN_DIR)/brute_force $(DATA_DIR)/tsp2_1248.txt 2>/dev/null || echo "   (interrompido por timeout)"
	@echo ""
	@echo "3. Para inst√¢ncias maiores, apenas aproximativo √© vi√°vel:"
	@$(BIN_DIR)/mst_approx $(DATA_DIR)/tsp4_7013.txt 2>/dev/null || true

# Ajuda
help:
	@echo "üÜò Comandos dispon√≠veis:"
	@echo ""
	@echo "  make all         - Compila tudo"
	@echo "  make setup       - Cria diret√≥rios necess√°rios"
	@echo "  make c-programs  - Compila apenas c√≥digo C"
	@echo "  make java-programs - Compila apenas c√≥digo Java"
	@echo "  make quick-test  - Executa testes r√°pidos"
	@echo "  make test        - Executa bateria de testes"
	@echo "  make run-all     - Executa experimentos completos"
	@echo "  make c-only      - Apenas experimentos C"
	@echo "  make java-only   - Apenas experimentos Java"
	@echo "  make python-only - Apenas experimentos Python"
	@echo "  make benchmark   - Benchmark r√°pido"
	@echo "  make demo        - Demonstra√ß√£o"
	@echo "  make check       - Verifica ambiente"
	@echo "  make install-deps - Instala depend√™ncias (Ubuntu)"
	@echo "  make clean       - Remove arquivos compilados"
	@echo "  make help        - Mostra esta ajuda"
	@echo ""
	@echo "üöÄ Para come√ßar rapidamente:"
	@echo "  make all && make quick-test"
