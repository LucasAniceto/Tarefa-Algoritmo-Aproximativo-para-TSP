#!/bin/bash

echo "üöÄ === COMPARA√á√ÉO DE LINGUAGENS - ALGORITMOS TSP ==="
echo ""

# Criar arquivo de resultados
mkdir -p results
echo "Arquivo,Linguagem,Algoritmo,Cidades,Custo,Tempo(s),Tipo" > results/comparacao_linguagens.csv

# Arquivos TSP com estrat√©gias espec√≠ficas
echo "üéØ ESTRAT√âGIA INTELIGENTE POR ARQUIVO:"
echo "   ‚úÖ tsp2_1248.txt (6 cidades) = Exatos + Aproximativos"
echo "   ‚úÖ tsp1_253.txt (11 cidades) = Exatos + Aproximativos"
echo "   ‚ö†Ô∏è tsp3_1194.txt (15 cidades) = C SEM timeout, Java/Python COM timeout + Aproximativos"
echo "   üå≥ tsp4_7013.txt (44 cidades) = APENAS Aproximativos"
echo "   üå≥ tsp5_27603.txt (29 cidades) = APENAS Aproximativos"
echo ""

# Arquivos para testar
files=("tsp2_1248.txt" "tsp1_253.txt" "tsp3_1194.txt" "tsp4_7013.txt" "tsp5_27603.txt")
cities=(6 11 15 44 29)
optimal=(1248 253 1194 7013 27603)
strategies=("full_exact" "full_exact" "mixed_exact" "approx_only" "approx_only")

echo "üìã Testando arquivos: ${files[@]}"
echo "üèÅ Executando algoritmos conforme estrat√©gia de cada arquivo"
echo ""

for i in "${!files[@]}"; do
    file=${files[$i]}
    n=${cities[$i]}
    opt=${optimal[$i]}
    strategy=${strategies[$i]}
    
    echo "üß™ === TESTANDO $file ($n cidades, √≥timo=$opt, estrat√©gia=$strategy) ==="
    echo ""
    
    if [[ "$strategy" == "full_exact" ]]; then
        # ARQUIVOS PEQUENOS (6 e 11 cidades) - Todos os algoritmos exatos + aproximativos
        echo "üéØ Rodando TODOS os algoritmos (exatos + aproximativos)"
        echo ""
        
        # === ALGORITMOS EXATOS ===
        echo "üî• === ALGORITMOS EXATOS ==="
        
        # 1. For√ßa Bruta C (timeout padr√£o)
        echo "üî• 1. For√ßa Bruta C:"
        if [[ -f "bin/brute_force" ]]; then
            output=$(timeout 300 ./bin/brute_force "data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo encontrado:" | awk '{print $4}')
                time_c=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_c}s"
                echo "$file,C,BRUTE_FORCE,$n,$cost,$time_c,EXACT" >> results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout C (5min)"
            fi
        else
            echo "  ‚ùå Execut√°vel n√£o encontrado: bin/brute_force"
        fi
        
        # 2. For√ßa Bruta Java
        echo "‚òï 2. For√ßa Bruta Java:"
        if [[ -f "src/java/exact/BruteForce.class" ]]; then
            cd src/java/exact
            output=$(timeout 300 java BruteForce "../../../data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo:" | awk '{print $3}')
                time_java=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_java}s"
                echo "$file,Java,BRUTE_FORCE,$n,$cost,$time_java,EXACT" >> ../../../results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Java (5min)"
            fi
            cd ../../..
        else
            echo "  ‚ùå Classe n√£o encontrada: src/java/exact/BruteForce.class"
        fi
        
        # 3. For√ßa Bruta Python
        echo "üêç 3. For√ßa Bruta Python:"
        if [[ -f "src/python/exact/brute_force_python.py" ]]; then
            output=$(timeout 300 python3 src/python/exact/brute_force_python.py "data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo encontrado:" | awk '{print $4}')
                time_python=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_python}s"
                echo "$file,Python,BRUTE_FORCE,$n,$cost,$time_python,EXACT" >> results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Python (5min)"
            fi
        else
            echo "  ‚ùå Script n√£o encontrado: src/python/exact/brute_force_python.py"
        fi
        
        # 4. Branch & Bound Java
        echo "üå≥ 4. Branch & Bound Java:"
        if [[ -f "src/java/exact/BranchBound.class" ]]; then
            cd src/java/exact
            output=$(timeout 300 java BranchBound "../../../data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo:" | awk '{print $3}')
                time_bb=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                pruned=$(echo "$output" | grep "N√≥s podados:" | awk '{print $3}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_bb}s, Podados: $pruned"
                echo "$file,Java,BRANCH_BOUND,$n,$cost,$time_bb,EXACT" >> ../../../results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Branch & Bound (5min)"
            fi
            cd ../../..
        else
            echo "  ‚ùå Classe n√£o encontrada: src/java/exact/BranchBound.class"
        fi
        
        echo ""
        echo "üå≥ === ALGORITMOS APROXIMATIVOS ==="
        
        # 5. MST C
        echo "üî• 5. MST Aproximativo C:"
        if [[ -f "bin/mst_approx" ]]; then
            output=$(./bin/mst_approx "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_c=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_c" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_c}s, Raz√£o: $ratio"
                echo "$file,C,MST_APPROX,$n,$cost,$time_c,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Execut√°vel n√£o encontrado: bin/mst_approx"
        fi
        
        # 6. MST Python
        echo "üêç 6. MST Aproximativo Python:"
        if [[ -f "src/python/approximate/mst_algorithm.py" ]]; then
            output=$(python3 src/python/approximate/mst_algorithm.py "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_python=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_python" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_python}s, Raz√£o: $ratio"
                echo "$file,Python,MST_APPROX,$n,$cost,$time_python,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Script n√£o encontrado: src/python/approximate/mst_algorithm.py"
        fi
        
    elif [[ "$strategy" == "mixed_exact" ]]; then
        # ARQUIVO M√âDIO (15 cidades) - C sem timeout, Java/Python com timeout + aproximativos
        echo "‚ö†Ô∏è Rodando EXATOS (C sem timeout, Java/Python com timeout) + APROXIMATIVOS"
        echo ""
        
        # === ALGORITMOS EXATOS ===
        echo "üî• === ALGORITMOS EXATOS ==="
        
        # 1. For√ßa Bruta C (SEM TIMEOUT - pode demorar muito!)
        echo "üî• 1. For√ßa Bruta C (SEM TIMEOUT - pode demorar horas!):"
        if [[ -f "bin/brute_force" ]]; then
            echo "  ‚è≥ Iniciando execu√ß√£o sem timeout..."
            start_time=$(date +%s)
            output=$(./bin/brute_force "data/$file" 2>&1)
            end_time=$(date +%s)
            elapsed_time=$((end_time - start_time))
            
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo encontrado:" | awk '{print $4}')
                time_c=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_c}s (Tempo real: ${elapsed_time}s)"
                echo "$file,C,BRUTE_FORCE,$n,$cost,$time_c,EXACT" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o ap√≥s ${elapsed_time}s"
            fi
        else
            echo "  ‚ùå Execut√°vel n√£o encontrado: bin/brute_force"
        fi
        
        # 2. For√ßa Bruta Java (COM TIMEOUT de 30 minutos)
        echo "‚òï 2. For√ßa Bruta Java (timeout 30min):"
        if [[ -f "src/java/exact/BruteForce.class" ]]; then
            cd src/java/exact
            output=$(timeout 1800 java BruteForce "../../../data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo:" | awk '{print $3}')
                time_java=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_java}s"
                echo "$file,Java,BRUTE_FORCE,$n,$cost,$time_java,EXACT" >> ../../../results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Java (30min)"
            fi
            cd ../../..
        else
            echo "  ‚ùå Classe n√£o encontrada: src/java/exact/BruteForce.class"
        fi
        
        # 3. For√ßa Bruta Python (COM TIMEOUT de 30 minutos)
        echo "üêç 3. For√ßa Bruta Python (timeout 30min):"
        if [[ -f "src/python/exact/brute_force_python.py" ]]; then
            output=$(timeout 1800 python3 src/python/exact/brute_force_python.py "data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo encontrado:" | awk '{print $4}')
                time_python=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_python}s"
                echo "$file,Python,BRUTE_FORCE,$n,$cost,$time_python,EXACT" >> results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Python (30min)"
            fi
        else
            echo "  ‚ùå Script n√£o encontrado: src/python/exact/brute_force_python.py"
        fi
        
        # 4. Branch & Bound Java (COM TIMEOUT de 30 minutos)
        echo "üå≥ 4. Branch & Bound Java (timeout 30min):"
        if [[ -f "src/java/exact/BranchBound.class" ]]; then
            cd src/java/exact
            output=$(timeout 1800 java BranchBound "../../../data/$file" 2>&1)
            if [[ $? -eq 0 ]]; then
                cost=$(echo "$output" | grep "Melhor custo:" | awk '{print $3}')
                time_bb=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
                pruned=$(echo "$output" | grep "N√≥s podados:" | awk '{print $3}')
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_bb}s, Podados: $pruned"
                echo "$file,Java,BRANCH_BOUND,$n,$cost,$time_bb,EXACT" >> ../../../results/comparacao_linguagens.csv
            else
                echo "  ‚è±Ô∏è Timeout Branch & Bound (30min)"
            fi
            cd ../../..
        else
            echo "  ‚ùå Classe n√£o encontrada: src/java/exact/BranchBound.class"
        fi
        
        echo ""
        echo "üå≥ === ALGORITMOS APROXIMATIVOS ==="
        
        # 5. MST C
        echo "üî• 5. MST Aproximativo C:"
        if [[ -f "bin/mst_approx" ]]; then
            output=$(./bin/mst_approx "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_c=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_c" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_c}s, Raz√£o: $ratio"
                echo "$file,C,MST_APPROX,$n,$cost,$time_c,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Execut√°vel n√£o encontrado: bin/mst_approx"
        fi
        
        # 6. MST Python
        echo "üêç 6. MST Aproximativo Python:"
        if [[ -f "src/python/approximate/mst_algorithm.py" ]]; then
            output=$(python3 src/python/approximate/mst_algorithm.py "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_python=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_python" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_python}s, Raz√£o: $ratio"
                echo "$file,Python,MST_APPROX,$n,$cost,$time_python,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Script n√£o encontrado: src/python/approximate/mst_algorithm.py"
        fi
        
    elif [[ "$strategy" == "approx_only" ]]; then
        # ARQUIVOS GRANDES (29 e 44 cidades) - APENAS algoritmos aproximativos
        echo "üå≥ Rodando APENAS algoritmos APROXIMATIVOS (inst√¢ncias grandes)"
        echo ""
        
        # 1. MST C
        echo "üî• 1. MST Aproximativo C:"
        if [[ -f "bin/mst_approx" ]]; then
            output=$(./bin/mst_approx "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_c=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_c" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_c}s, Raz√£o: $ratio"
                echo "$file,C,MST_APPROX,$n,$cost,$time_c,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Execut√°vel n√£o encontrado: bin/mst_approx"
        fi
        
        # 2. MST Python
        echo "üêç 2. MST Aproximativo Python:"
        if [[ -f "src/python/approximate/mst_algorithm.py" ]]; then
            output=$(python3 src/python/approximate/mst_algorithm.py "data/$file" 2>&1)
            cost=$(echo "$output" | grep "Custo aproximado:" | awk '{print $3}')
            time_python=$(echo "$output" | grep "Tempo de execu√ß√£o:" | awk '{print $4}')
            if [[ -n "$cost" && -n "$time_python" ]]; then
                ratio=$(echo "scale=3; $cost / $opt" | bc -l)
                echo "  ‚úÖ Custo: $cost, Tempo: ${time_python}s, Raz√£o: $ratio"
                echo "$file,Python,MST_APPROX,$n,$cost,$time_python,APPROX" >> results/comparacao_linguagens.csv
            else
                echo "  ‚ùå Erro na execu√ß√£o"
            fi
        else
            echo "  ‚ùå Script n√£o encontrado: src/python/approximate/mst_algorithm.py"
        fi
    fi
    
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
done

echo "üìä === RESULTADOS FINAIS ==="
echo ""

if [[ -f "results/comparacao_linguagens.csv" ]]; then
    echo "Arquivo de resultados: results/comparacao_linguagens.csv"
    echo ""
    echo "Tabela de Compara√ß√£o:"
    column -t -s',' results/comparacao_linguagens.csv
    echo ""
    
    # An√°lise por arquivo
    echo "üìà === AN√ÅLISE DE PERFORMANCE POR ARQUIVO ==="
    echo ""
    
    for file in "${files[@]}"; do
        echo "üìä $file:"
        grep "$file" results/comparacao_linguagens.csv | while IFS=, read -r fname lang algo cities cost time tipo; do
            if [[ "$lang" != "Linguagem" ]]; then
                echo "  $lang ($algo, $tipo): ${time}s, Custo: $cost"
            fi
        done
        echo ""
    done
    
    # Resumo por tipo
    echo "üìà === RESUMO POR TIPO DE ALGORITMO ==="
    echo ""
    echo "üî• Algoritmos Exatos:"
    grep "EXACT" results/comparacao_linguagens.csv | while IFS=, read -r fname lang algo cities cost time tipo; do
        echo "  $fname - $lang ($algo): ${time}s"
    done
    echo ""
    echo "üå≥ Algoritmos Aproximativos:"
    grep "APPROX" results/comparacao_linguagens.csv | while IFS=, read -r fname lang algo cities cost time tipo; do
        echo "  $fname - $lang ($algo): ${time}s"
    done
    
else
    echo "‚ùå Arquivo de resultados n√£o foi gerado"
fi

echo ""
echo "üèÜ === COMPARA√á√ÉO CONCLU√çDA ==="
echo "üéØ Resultados salvos em: results/comparacao_linguagens.csv"
echo ""
echo "‚ö†Ô∏è  NOTA: O algoritmo C para tsp3_1194.txt roda SEM timeout - pode demorar v√°rias horas!"
echo "   Se precisar interromper, use Ctrl+C"
