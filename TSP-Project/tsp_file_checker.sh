#!/bin/bash

# Script para verificar se os arquivos TSP est√£o corretos
# e diagnosticar problemas de compila√ß√£o

echo "üîç === DIAGN√ìSTICO COMPLETO TSP ==="
echo "üìÖ $(date)"
echo ""

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 1. VERIFICAR ARQUIVOS TSP
echo -e "${BLUE}1. VERIFICANDO ARQUIVOS TSP...${NC}"
echo ""

for file in tsp1_253.txt tsp2_1248.txt tsp3_1194.txt; do
    filepath="data/$file"
    echo -e "${BLUE}üìÅ Arquivo: $file${NC}"
    
    if [ -f "$filepath" ]; then
        lines=$(wc -l < "$filepath")
        size=$(du -h "$filepath" | cut -f1)
        
        echo "   ‚úÖ Existe: $size, $lines linhas"
        
        # Verificar se tem o n√∫mero correto de linhas
        case $file in
            "tsp1_253.txt") expected_lines=11 ;;
            "tsp2_1248.txt") expected_lines=6 ;;
            "tsp3_1194.txt") expected_lines=15 ;;
        esac
        
        if [ "$lines" -eq "$expected_lines" ]; then
            echo -e "   ${GREEN}‚úÖ N√∫mero de linhas correto: $lines${NC}"
        else
            echo -e "   ${RED}‚ùå N√∫mero incorreto de linhas: $lines (esperado: $expected_lines)${NC}"
        fi
        
        # Mostrar primeiras linhas
        echo "   üìÑ Primeiras 3 linhas:"
        head -3 "$filepath" | sed 's/^/      /'
        
        # Verificar se primeira linha tem n√∫meros corretos
        first_line=$(head -1 "$filepath")
        num_columns=$(echo "$first_line" | wc -w)
        
        if [ "$num_columns" -eq "$expected_lines" ]; then
            echo -e "   ${GREEN}‚úÖ Primeira linha tem $num_columns n√∫meros (correto)${NC}"
        else
            echo -e "   ${RED}‚ùå Primeira linha tem $num_columns n√∫meros (esperado: $expected_lines)${NC}"
        fi
        
        # Verificar se s√£o todos n√∫meros
        if echo "$first_line" | grep -q '^[0-9 \t]*$'; then
            echo -e "   ${GREEN}‚úÖ Primeira linha cont√©m apenas n√∫meros${NC}"
        else
            echo -e "   ${RED}‚ùå Primeira linha cont√©m caracteres n√£o-num√©ricos${NC}"
            echo "   üëÄ Caracteres encontrados: $(echo "$first_line" | tr -d '0-9 \t')"
        fi
        
    else
        echo -e "   ${RED}‚ùå Arquivo n√£o encontrado!${NC}"
    fi
    echo ""
done

# 2. VERIFICAR COMPILA√á√ÉO
echo -e "${BLUE}2. VERIFICANDO COMPILA√á√ÉO...${NC}"
echo ""

if [ -f "bin/brute_force" ]; then
    echo -e "${GREEN}‚úÖ Execut√°vel bin/brute_force existe${NC}"
    ls -la bin/brute_force
    
    # Verificar se √© execut√°vel
    if [ -x "bin/brute_force" ]; then
        echo -e "${GREEN}‚úÖ Tem permiss√£o de execu√ß√£o${NC}"
    else
        echo -e "${RED}‚ùå N√£o tem permiss√£o de execu√ß√£o${NC}"
        echo "   Corrija com: chmod +x bin/brute_force"
    fi
    
    # Testar depend√™ncias
    echo ""
    echo "üîß Testando depend√™ncias..."
    if ldd bin/brute_force 2>/dev/null | grep -q "not found"; then
        echo -e "${RED}‚ùå Bibliotecas faltando:${NC}"
        ldd bin/brute_force | grep "not found"
    else
        echo -e "${GREEN}‚úÖ Todas as bibliotecas encontradas${NC}"
    fi
    
else
    echo -e "${RED}‚ùå Execut√°vel bin/brute_force N√ÉO EXISTE${NC}"
    echo ""
    echo "üîß RECOMPILANDO..."
    
    if [ -f "src/c/exact/brute_force.c" ]; then
        echo "   C√≥digo fonte encontrado: src/c/exact/brute_force.c"
        echo "   Compilando com: gcc -Wall -Wextra -O3 -std=c99 -o bin/brute_force src/c/exact/brute_force.c"
        
        mkdir -p bin
        gcc -Wall -Wextra -O3 -std=c99 -o bin/brute_force src/c/exact/brute_force.c
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Compila√ß√£o bem-sucedida!${NC}"
        else
            echo -e "${RED}‚ùå Erro na compila√ß√£o!${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå C√≥digo fonte n√£o encontrado: src/c/exact/brute_force.c${NC}"
        exit 1
    fi
fi

# 3. TESTE B√ÅSICO
echo ""
echo -e "${BLUE}3. TESTE B√ÅSICO DE EXECU√á√ÉO...${NC}"
echo ""

# Criar arquivo de teste simples
echo "üìù Criando arquivo de teste (4x4)..."
mkdir -p data
cat > data/test_4x4.txt << EOF
0 10 15 20
10 0 35 25
15 35 0 30
20 25 30 0
EOF

echo "‚úÖ Arquivo de teste criado: data/test_4x4.txt"
echo ""

# Testar execu√ß√£o b√°sica
echo "üß™ Testando execu√ß√£o b√°sica..."
echo "Comando: ./bin/brute_force data/test_4x4.txt"
echo "Sa√≠da:"
echo "----------------------------------------"

./bin/brute_force data/test_4x4.txt 2>&1
test_exit_code=$?

echo "----------------------------------------"
echo "Exit code: $test_exit_code"

if [ $test_exit_code -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Teste b√°sico PASSOU!${NC}"
    echo "   O programa funciona corretamente"
else
    echo -e "${RED}‚ùå Teste b√°sico FALHOU!${NC}"
    echo "   H√° problema no programa ou sistema"
    
    # Diagnostics adicionais
    echo ""
    echo "üîç Diagn√≥sticos adicionais:"
    echo "   Sistema: $(uname -a)"
    echo "   Arquitetura: $(uname -m)"
    echo "   GCC vers√£o: $(gcc --version 2>/dev/null | head -1)"
    
    exit 1
fi

# 4. TESTE COM TSP2 (pequeno)
echo ""
echo -e "${BLUE}4. TESTE COM TSP2 (arquivo real)...${NC}"
echo ""

if [ -f "data/tsp2_1248.txt" ]; then
    echo "üß™ Testando tsp2_1248.txt (deve ser r√°pido)..."
    echo "Comando: ./bin/brute_force data/tsp2_1248.txt"
    echo "Sa√≠da:"
    echo "----------------------------------------"
    
    timeout 30 ./bin/brute_force data/tsp2_1248.txt 2>&1
    tsp2_exit_code=$?
    
    echo "----------------------------------------"
    echo "Exit code: $tsp2_exit_code"
    
    if [ $tsp2_exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ TSP2 funcionou perfeitamente!${NC}"
    elif [ $tsp2_exit_code -eq 124 ]; then
        echo -e "${YELLOW}‚è±Ô∏è TSP2 deu timeout (>30s - estranho para 6 cidades)${NC}"
    else
        echo -e "${RED}‚ùå TSP2 falhou!${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è tsp2_1248.txt n√£o encontrado, pulando teste${NC}"
fi

# 5. TESTE R√ÅPIDO COM TSP3
echo ""
echo -e "${BLUE}5. TESTE R√ÅPIDO COM TSP3...${NC}"
echo ""

if [ -f "data/tsp3_1194.txt" ]; then
    echo "üß™ Testando tsp3_1194.txt por 10 segundos (s√≥ para ver se inicia)..."
    echo "Comando: timeout 10 ./bin/brute_force data/tsp3_1194.txt"
    echo "Sa√≠da:"
    echo "----------------------------------------"
    
    timeout 10 ./bin/brute_force data/tsp3_1194.txt 2>&1
    tsp3_exit_code=$?
    
    echo "----------------------------------------"
    echo "Exit code: $tsp3_exit_code"
    
    if [ $tsp3_exit_code -eq 124 ]; then
        echo -e "${GREEN}‚úÖ TSP3 iniciou corretamente!${NC}"
        echo "   (Timeout √© esperado - programa estava rodando)"
    elif [ $tsp3_exit_code -eq 0 ]; then
        echo -e "${RED}‚ùå TSP3 terminou muito r√°pido!${NC}"
        echo "   Isso indica problema no arquivo ou algoritmo"
    else
        echo -e "${RED}‚ùå TSP3 deu erro!${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è tsp3_1194.txt n√£o encontrado${NC}"
fi

# 6. DIAGN√ìSTICO FINAL
echo ""
echo -e "${BLUE}6. DIAGN√ìSTICO FINAL...${NC}"
echo ""

if [ $test_exit_code -eq 0 ]; then
    if [ -f "data/tsp3_1194.txt" ]; then
        lines=$(wc -l < "data/tsp3_1194.txt")
        if [ "$lines" -eq 15 ]; then
            echo -e "${GREEN}‚úÖ TUDO PARECE OK!${NC}"
            echo ""
            echo "üí° PR√ìXIMOS PASSOS:"
            echo "   1. Execute TSP3 manualmente:"
            echo "      nohup ./bin/brute_force data/tsp3_1194.txt > tsp3_result.log 2>&1 &"
            echo "   2. Monitore com:"
            echo "      tail -f tsp3_result.log"
            echo "   3. Aguarde ~17 horas para conclus√£o"
        else
            echo -e "${RED}‚ùå PROBLEMA: tsp3_1194.txt tem $lines linhas (deveria ter 15)${NC}"
            echo "   Verifique se o arquivo est√° correto"
        fi
    else
        echo -e "${RED}‚ùå PROBLEMA: tsp3_1194.txt n√£o encontrado${NC}"
    fi
else
    echo -e "${RED}‚ùå PROBLEMA: Programa n√£o funciona corretamente${NC}"
    echo "   Verifique compila√ß√£o e depend√™ncias"
fi

echo ""
echo "üèÅ Diagn√≥stico conclu√≠do!"
